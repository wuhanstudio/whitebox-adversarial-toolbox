window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "what", "modulename": "what", "kind": "module", "doc": "<p>WHite-box Adversarial Toolbox (WHAT) is a python library for Deep Learning Security that focuses on realtime white-box attacks.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<pre><code>pip install whitebox-adversarial-toolbox\n</code></pre>\n\n<p>Then you can use the cli tool <code>what</code> to try real-time adversarial attacks.</p>\n\n<pre><code>sage: what [OPTIONS] COMMAND [ARGS]...\n\n  The CLI tool for WHite-box Adversarial Toolbox (WHAT).\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  attack   Manage Attacks\n  example  Manage Examples\n  model    Manage Deep Learning Models\n</code></pre>\n\n<p><br /></p>\n\n<h2 id=\"whatmodels\">what.models</h2>\n\n<p>Use <code>what model list</code> to list available models:</p>\n\n<pre><code>                Model                      Model Type           Description\n----------------------------------------------------------------------------------------------------\n[ ] 1 : YOLOv3      (    Darknet    )   Object Detection        YOLOv3 pretrained on MS COCO dataset.\n[ ] 2 : YOLOv3      (   Mobilenet   )   Object Detection        YOLOv3 pretrained on MS COCO dataset.\n[ ] 3 : YOLOv3 Tiny (    Darknet    )   Object Detection        YOLOv3 Tiny pretrained on MS COCO dataset.\n[ ] 4 : YOLOv3 Tiny (   MobileNet   )   Object Detection        YOLOv3 Tiny pretrained on MS COCO dataset.\n[ ] 5 : YOLOv4      (    Darknet    )   Object Detection        YOLOv4 pretrained on MS COCO dataset.\n[ ] 6 : YOLOv4 Tiny (    Darknet    )   Object Detection        YOLOv4 Tiny pretrained on MS COCO dataset.\n[ ] 7 : SSD         ( MobileNet  v1 )   Object Detection        SSD pretrained on VOC-2012 dataset.\n[ ] 8 : SSD         ( MobileNet  v2 )   Object Detection        SSD pretrained on VOC-2012 dataset.\n[ ] 9 : FasterRCNN  (     VGG16     )   Object Detection        Faster-RCNN pretrained on VOC-2012 dataset.\n</code></pre>\n\n<p>Use <code>what model download</code> to download pre-trained models:</p>\n\n<pre><code>                Model                      Model Type           Description\n----------------------------------------------------------------------------------------------------\n[x] 1 : YOLOv3      (    Darknet    )   Object Detection        YOLOv3 pretrained on MS COCO dataset.\n[x] 2 : YOLOv3      (   Mobilenet   )   Object Detection        YOLOv3 pretrained on MS COCO dataset.\n[x] 3 : YOLOv3 Tiny (    Darknet    )   Object Detection        YOLOv3 Tiny pretrained on MS COCO dataset.\n[x] 4 : YOLOv3 Tiny (   MobileNet   )   Object Detection        YOLOv3 Tiny pretrained on MS COCO dataset.\n[x] 5 : YOLOv4      (    Darknet    )   Object Detection        YOLOv4 pretrained on MS COCO dataset.\n[x] 6 : YOLOv4 Tiny (    Darknet    )   Object Detection        YOLOv4 Tiny pretrained on MS COCO dataset.\n[x] 7 : SSD         ( MobileNet  v1 )   Object Detection        SSD pretrained on VOC-2012 dataset.\n[x] 8 : SSD         ( MobileNet  v2 )   Object Detection        SSD pretrained on VOC-2012 dataset.\n[x] 9 : FasterRCNN  (     VGG16     )   Object Detection        Faster-RCNN pretrained on VOC-2012 dataset.\n\nPlease input the model index: \n</code></pre>\n\n<p><br /></p>\n\n<h2 id=\"whatattacks\">what.attacks</h2>\n\n<p>Use <code>what attack list</code> to list available attacks:</p>\n\n<pre><code>1 : TOG Attack  Object Detection\n2 : PCB Attack  Object Detection\n</code></pre>\n\n<p>Related Papers:</p>\n\n<ul>\n<li><a href=\"https://ieeexplore.ieee.org/document/9325397\">Adversarial Objectness Gradient Attacks in Real-time Object Detection Systems</a>.</li>\n<li><a href=\"https://arxiv.org/abs/2208.07174\">A Man-in-the-Middle Attack against Object Detection Systems</a>.</li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"whatexamples\">what.examples</h2>\n\n<p>Use <code>what example list</code> to list available examples:</p>\n\n<pre><code>           Demo                Type             Description\n--------------------------------------------------------------------------------\n1 :     Yolov3 Demo      Model Inference        Yolov3 Object Detection.\n2 :     Yolov4 Demo      Model Inference        Yolov4 Object Detection.\n3 :   FasterRCNN Demo    Model Inference        FRCNN Object Detection.\n4 : MobileNet SSD Demo   Model Inference        MobileNet SSD Object Detection.\n5 :  TOG Attack Demo    Adversarial Attack      Real-time TOG Attack against Yolov3 Tiny.\n6 :  PCB Attack Demo    Adversarial Attack      Real-time PCB Attack against Yolov3 Tiny.\n</code></pre>\n\n<p>Use <code>what example run</code> to run examples.</p>\n\n<pre><code>           Demo                Type             Description\n--------------------------------------------------------------------------------\n1 :     Yolov3 Demo      Model Inference        Yolov3 Object Detection.\n2 :     Yolov4 Demo      Model Inference        Yolov4 Object Detection.\n3 :   FasterRCNN Demo    Model Inference        FRCNN Object Detection.\n4 : MobileNet SSD Demo   Model Inference        MobileNet SSD Object Detection.\n5 :  TOG Attack Demo    Adversarial Attack      Real-time TOG Attack against Yolov3 Tiny.\n6 :  PCB Attack Demo    Adversarial Attack      Real-time PCB Attack against Yolov3 Tiny.\n\nPlease input the example index: \n</code></pre>\n\n<p><br /></p>\n\n<h2 id=\"whatutils\">what.utils</h2>\n\n<p>This module implements several utility functions.</p>\n\n<p><br /></p>\n"}, {"fullname": "what.attacks", "modulename": "what.attacks", "kind": "module", "doc": "<p>This module implements several white-box attacks against Deep Learning models.</p>\n\n<p>Use <code>what attack list</code> to list available attacks:</p>\n\n<pre><code>1 : TOG Attack  Object Detection\n2 : PCB Attack  Object Detection\n</code></pre>\n\n<p><br /></p>\n\n<h2 id=\"whatattacksdetectionyolopcb\">what.attacks.detection.yolo.PCB</h2>\n\n<ul>\n<li><a href=\"https://arxiv.org/abs/2208.07174\">A Man-in-the-Middle Attack against Object Detection Systems</a>.</li>\n</ul>\n\n<h2 id=\"whatattacksdetectionyolotog\">what.attacks.detection.yolo.TOG</h2>\n\n<ul>\n<li><a href=\"https://ieeexplore.ieee.org/document/9325397\">Adversarial Objectness Gradient Attacks in Real-time Object Detection Systems</a>.</li>\n</ul>\n"}, {"fullname": "what.attacks.detection", "modulename": "what.attacks.detection", "kind": "module", "doc": "<p>This module implements adversarial attacks against object detection models.</p>\n\n<h2 id=\"whatattacksdetectionyolo\">what.attacks.detection.yolo</h2>\n"}, {"fullname": "what.attacks.detection.yolo", "modulename": "what.attacks.detection.yolo", "kind": "module", "doc": "<p>This module implements several white-box attacks against YOLO object detection model.</p>\n\n<h2 id=\"whatattacksdetectionyolopcb\">what.attacks.detection.yolo.PCB</h2>\n\n<ul>\n<li><a href=\"https://arxiv.org/abs/2208.07174\">A Man-in-the-Middle Attack against Object Detection Systems</a>.</li>\n</ul>\n\n<h2 id=\"whatattacksdetectionyolotog\">what.attacks.detection.yolo.TOG</h2>\n\n<ul>\n<li><a href=\"https://ieeexplore.ieee.org/document/9325397\">Adversarial Objectness Gradient Attacks in Real-time Object Detection Systems</a>.</li>\n</ul>\n"}, {"fullname": "what.attacks.detection.yolo.PCB", "modulename": "what.attacks.detection.yolo.PCB", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.attacks.detection.yolo.PCB.PCBAttack", "modulename": "what.attacks.detection.yolo.PCB", "qualname": "PCBAttack", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.attacks.detection.yolo.PCB.PCBAttack.__init__", "modulename": "what.attacks.detection.yolo.PCB", "qualname": "PCBAttack.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">attack_type</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span>,</span><span class=\"param\">\t<span class=\"n\">init</span><span class=\"o\">=</span><span class=\"s1\">&#39;zero&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01568627450980392</span>,</span><span class=\"param\">\t<span class=\"n\">batch</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">decay</span><span class=\"o\">=</span><span class=\"mf\">0.98</span></span>)</span>"}, {"fullname": "what.attacks.detection.yolo.PCB.PCBAttack.attack", "modulename": "what.attacks.detection.yolo.PCB", "qualname": "PCBAttack.attack", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_cv_image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.attacks.detection.yolo.TOG", "modulename": "what.attacks.detection.yolo.TOG", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.attacks.detection.yolo.TOG.TOGAttack", "modulename": "what.attacks.detection.yolo.TOG", "qualname": "TOGAttack", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.attacks.detection.yolo.TOG.TOGAttack.__init__", "modulename": "what.attacks.detection.yolo.TOG", "qualname": "TOGAttack.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">attack_type</span>, </span><span class=\"param\"><span class=\"n\">classes</span>, </span><span class=\"param\"><span class=\"n\">init</span><span class=\"o\">=</span><span class=\"s1\">&#39;zero&#39;</span>, </span><span class=\"param\"><span class=\"n\">decay</span><span class=\"o\">=</span><span class=\"mf\">0.99</span></span>)</span>"}, {"fullname": "what.attacks.detection.yolo.TOG.TOGAttack.attack", "modulename": "what.attacks.detection.yolo.TOG", "qualname": "TOGAttack.attack", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_cv_image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.examples", "modulename": "what.examples", "kind": "module", "doc": "<p>This module implements several examples, including model inference and adversarial attacks.</p>\n\n<p>Use <code>what example run</code> to run examples.</p>\n\n<pre><code>           Demo                Type             Description\n--------------------------------------------------------------------------------\n1 :     Yolov3 Demo      Model Inference        Yolov3 Object Detection.\n2 :     Yolov4 Demo      Model Inference        Yolov4 Object Detection.\n3 :   FasterRCNN Demo    Model Inference        FRCNN Object Detection.\n4 : MobileNet SSD Demo   Model Inference        MobileNet SSD Object Detection.\n5 :  TOG Attack Demo    Adversarial Attack      Real-time TOG Attack against Yolov3 Tiny.\n6 :  PCB Attack Demo    Adversarial Attack      Real-time PCB Attack against Yolov3 Tiny.\n\nPlease input the example index: \n</code></pre>\n\n<p><br /></p>\n\n<h1 id=\"model-inference\">Model Inference:</h1>\n\n<p>Object Detection Demos.</p>\n\n<h2 id=\"whatexamplesyolov3_demo\">what.examples.yolov3_demo</h2>\n\n<h2 id=\"whatexamplesyolov4_demo\">what.examples.yolov4_demo</h2>\n\n<h2 id=\"whatexamplesfaster_rcnn_demo\">what.examples.faster_rcnn_demo</h2>\n\n<h2 id=\"whatexamplesmobilenet_ssd_demo\">what.examples.mobilenet_ssd_demo</h2>\n\n<p><br /></p>\n\n<h1 id=\"adversarial-attacks\">Adversarial Attacks:</h1>\n\n<p>Real-time Adversarial Attacks against Object Detection.</p>\n\n<h2 id=\"whatexamplesyolov3_tog_attack_demo\">what.examples.yolov3_tog_attack_demo</h2>\n\n<h2 id=\"whatexamplesyolov3_pcb_attack_demo\">what.examples.yolov3_pcb_attack_demo</h2>\n"}, {"fullname": "what.examples.faster_rcnn_demo", "modulename": "what.examples.faster_rcnn_demo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.examples.faster_rcnn_demo.frcnn_inference_demo", "modulename": "what.examples.faster_rcnn_demo", "qualname": "frcnn_inference_demo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.examples.mobilenet_ssd_demo", "modulename": "what.examples.mobilenet_ssd_demo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.examples.mobilenet_ssd_demo.mobilenet_ssd_inference_demo", "modulename": "what.examples.mobilenet_ssd_demo", "qualname": "mobilenet_ssd_inference_demo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.examples.yolov3_demo", "modulename": "what.examples.yolov3_demo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.examples.yolov3_demo.yolov3_inference_demo", "modulename": "what.examples.yolov3_demo", "qualname": "yolov3_inference_demo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.examples.yolov3_pcb_attack_demo", "modulename": "what.examples.yolov3_pcb_attack_demo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.examples.yolov3_pcb_attack_demo.yolov3_pcb_attack_demo", "modulename": "what.examples.yolov3_pcb_attack_demo", "qualname": "yolov3_pcb_attack_demo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.examples.yolov3_tog_attack_demo", "modulename": "what.examples.yolov3_tog_attack_demo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.examples.yolov3_tog_attack_demo.yolov3_tog_attack_demo", "modulename": "what.examples.yolov3_tog_attack_demo", "qualname": "yolov3_tog_attack_demo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.examples.yolov4_demo", "modulename": "what.examples.yolov4_demo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.examples.yolov4_demo.yolov4_inference_demo", "modulename": "what.examples.yolov4_demo", "qualname": "yolov4_inference_demo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models", "modulename": "what.models", "kind": "module", "doc": "<p>This module implements several object detection models.</p>\n\n<p>Use <code>what model list</code> to list available models:</p>\n\n<pre><code>                Model                      Model Type           Description\n----------------------------------------------------------------------------------------------------\n[ ] 1 : YOLOv3      (    Darknet    )   Object Detection        YOLOv3 pretrained on MS COCO dataset.\n[ ] 2 : YOLOv3      (   Mobilenet   )   Object Detection        YOLOv3 pretrained on MS COCO dataset.\n[ ] 3 : YOLOv3 Tiny (    Darknet    )   Object Detection        YOLOv3 Tiny pretrained on MS COCO dataset.\n[ ] 4 : YOLOv3 Tiny (   MobileNet   )   Object Detection        YOLOv3 Tiny pretrained on MS COCO dataset.\n[ ] 5 : YOLOv4      (    Darknet    )   Object Detection        YOLOv4 pretrained on MS COCO dataset.\n[ ] 6 : YOLOv4 Tiny (    Darknet    )   Object Detection        YOLOv4 Tiny pretrained on MS COCO dataset.\n[ ] 7 : SSD         ( MobileNet  v1 )   Object Detection        SSD pretrained on VOC-2012 dataset.\n[ ] 8 : SSD         ( MobileNet  v2 )   Object Detection        SSD pretrained on VOC-2012 dataset.\n[ ] 9 : FasterRCNN  (     VGG16     )   Object Detection        Faster-RCNN pretrained on VOC-2012 dataset.\n</code></pre>\n\n<h2 id=\"whatmodelsdetection\">what.models.detection</h2>\n"}, {"fullname": "what.models.detection", "modulename": "what.models.detection", "kind": "module", "doc": "<p>This module implements several object detection models and provides some utility functions.</p>\n\n<h2 id=\"whatmodelsdetectionyolo\">what.models.detection.yolo</h2>\n\n<h2 id=\"whatmodelsdetectionssd\">what.models.detection.ssd</h2>\n\n<h2 id=\"whatmodelsdetectionfrcnn\">what.models.detection.frcnn</h2>\n"}, {"fullname": "what.models.detection.datasets", "modulename": "what.models.detection.datasets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.datasets.coco", "modulename": "what.models.detection.datasets.coco", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.datasets.fiftyone", "modulename": "what.models.detection.datasets.fiftyone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.datasets.fiftyone.FiftyOneDataset", "modulename": "what.models.detection.datasets.fiftyone", "qualname": "FiftyOneDataset", "kind": "class", "doc": "<p>A class to construct a PyTorch dataset from a FiftyOne dataset.</p>\n\n<p>Args:\n    fiftyone_dataset: a FiftyOne dataset or view that will be used for \n        training or testing\n    transform (None): a list of PyTorch transform to apply to images \n        and targets when loading\n    ground_truth_field (\"ground_truth\"): the name of the field in fiftyone_dataset \n        that contains the desired labels to load\n    classes (None): a list of class strings that are used to define the \n        mapping between class names and indices. If None, it will use \n        all classes present in the given fiftyone_dataset.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "what.models.detection.datasets.fiftyone.FiftyOneDataset.__init__", "modulename": "what.models.detection.datasets.fiftyone", "qualname": "FiftyOneDataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fiftyone_dataset</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ground_truth_field</span><span class=\"o\">=</span><span class=\"s1\">&#39;ground_truth&#39;</span></span>)</span>"}, {"fullname": "what.models.detection.datasets.fiftyone.FiftyOneDataset.get_classes", "modulename": "what.models.detection.datasets.fiftyone", "qualname": "FiftyOneDataset.get_classes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.datasets.open_images", "modulename": "what.models.detection.datasets.open_images", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.datasets.open_images.OpenImagesDataset", "modulename": "what.models.detection.datasets.open_images", "qualname": "OpenImagesDataset", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.datasets.open_images.OpenImagesDataset.__init__", "modulename": "what.models.detection.datasets.open_images", "qualname": "OpenImagesDataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">root</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;train&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">balance_data</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "what.models.detection.datasets.open_images.OpenImagesDataset.get_annotation", "modulename": "what.models.detection.datasets.open_images", "qualname": "OpenImagesDataset.get_annotation", "kind": "function", "doc": "<p>To conform the eval_ssd implementation that is based on the VOC dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.datasets.open_images.OpenImagesDataset.get_image", "modulename": "what.models.detection.datasets.open_images", "qualname": "OpenImagesDataset.get_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.datasets.voc", "modulename": "what.models.detection.datasets.voc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.datasets.voc.VOCDataset", "modulename": "what.models.detection.datasets.voc", "qualname": "VOCDataset", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.datasets.voc.VOCDataset.__init__", "modulename": "what.models.detection.datasets.voc", "qualname": "VOCDataset.__init__", "kind": "function", "doc": "<p>Dataset for VOC data.\nArgs:\n    root: the root of the VOC2007 or VOC2012 dataset, the directory contains the following sub-directories:\n        Annotations, ImageSets, JPEGImages, SegmentationClass, SegmentationObject.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">root</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">keep_difficult</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">label_file</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "what.models.detection.datasets.voc.VOCDataset.get_image", "modulename": "what.models.detection.datasets.voc", "qualname": "VOCDataset.get_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.datasets.voc.VOCDataset.get_annotation", "modulename": "what.models.detection.datasets.voc", "qualname": "VOCDataset.get_annotation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn", "modulename": "what.models.detection.frcnn", "kind": "module", "doc": "<p>This module implements Faster-RCNN object detection model.</p>\n\n<p><br /></p>\n\n<h2 id=\"whatmodelsdetectionfrcnnfaster_rcnn\">what.models.detection.frcnn.faster_rcnn</h2>\n"}, {"fullname": "what.models.detection.frcnn.faster_rcnn", "modulename": "what.models.detection.frcnn.faster_rcnn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.LossTuple", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "LossTuple", "kind": "class", "doc": "<p>LossTuple(rpn_loc_loss, rpn_cls_loss, roi_loc_loss, roi_cls_loss, total_loss)</p>\n", "bases": "builtins.tuple"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.LossTuple.__init__", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "LossTuple.__init__", "kind": "function", "doc": "<p>Create new instance of LossTuple(rpn_loc_loss, rpn_cls_loss, roi_loc_loss, roi_cls_loss, total_loss)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rpn_loc_loss</span>, </span><span class=\"param\"><span class=\"n\">rpn_cls_loss</span>, </span><span class=\"param\"><span class=\"n\">roi_loc_loss</span>, </span><span class=\"param\"><span class=\"n\">roi_cls_loss</span>, </span><span class=\"param\"><span class=\"n\">total_loss</span></span>)</span>"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.LossTuple.rpn_loc_loss", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "LossTuple.rpn_loc_loss", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.LossTuple.rpn_cls_loss", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "LossTuple.rpn_cls_loss", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.LossTuple.roi_loc_loss", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "LossTuple.roi_loc_loss", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.LossTuple.roi_cls_loss", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "LossTuple.roi_cls_loss", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.LossTuple.total_loss", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "LossTuple.total_loss", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN", "kind": "class", "doc": "<p>wrapper for conveniently training. return losses</p>\n\n<p>The losses include:</p>\n\n<ul>\n<li><code>rpn_loc_loss</code>: The localization loss for         Region Proposal Network (RPN).</li>\n<li><code>rpn_cls_loss</code>: The classification loss for RPN.</li>\n<li><code>roi_loc_loss</code>: The localization loss for the head module.</li>\n<li><code>roi_cls_loss</code>: The classification loss for the head module.</li>\n<li><code>total_loss</code>: The sum of 4 loss above.</li>\n</ul>\n\n<p>Args:\n    faster_rcnn (model.FasterRCNN):\n        A Faster R-CNN model that is going to be trained.</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.__init__", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.__init__", "kind": "function", "doc": "<p>Initializes internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.predict", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.forward", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.forward", "kind": "function", "doc": "<p>Forward Faster R-CNN and calculate losses.</p>\n\n<p>Here are notations used.</p>\n\n<ul>\n<li>\\( N \\) is the batch size.</li>\n<li>\\( R \\) is the number of bounding boxes per image.</li>\n</ul>\n\n<p>Currently, only \\( N=1 \\) is supported.</p>\n\n<p>Args:\n    imgs (~torch.autograd.Variable): A variable with a batch of images.\n    bboxes (~torch.autograd.Variable): A batch of bounding boxes.\n        Its shape is \\( (N, R, 4) \\).\n    labels (~torch.autograd..Variable): A batch of labels.\n        Its shape is \\( (N, R) \\). The background is excluded from\n        the definition, which means that the range of the value\n        is \\( [0, L - 1] \\). \\( L \\) is the number of foreground\n        classes.\n    scale (float): Amount of scaling applied to\n        the raw image during preprocessing.</p>\n\n<p>Returns:\n    namedtuple of 5 losses</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">imgs</span>, </span><span class=\"param\"><span class=\"n\">bboxes</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.step", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">imgs</span>, </span><span class=\"param\"><span class=\"n\">bboxes</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.eval", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.eval", "kind": "function", "doc": "<p>Sets the module in evaluation mode.</p>\n\n<p>This has any effect only on certain modules. See documentations of\nparticular modules for details of their behaviors in training/evaluation\nmode, if they are affected, e.g. <code>Dropout</code>, <code>BatchNorm</code>,\netc.</p>\n\n<p>This is equivalent with <code>self.train(False) &lt;torch.nn.Module.train&gt;()</code>.</p>\n\n<p>See :ref:<code>locally-disable-grad-doc</code> for a comparison between\n<code>.eval()</code> and several similar mechanisms that may be confused with it.</p>\n\n<p>Returns:\n    Module: self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val_loader</span>, </span><span class=\"param\"><span class=\"n\">test_num</span><span class=\"o\">=</span><span class=\"mi\">10000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.load", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span>,</span><span class=\"param\">\t<span class=\"n\">load_optimizer</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">parse_opt</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">map_location</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.save", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.save", "kind": "function", "doc": "<p>serialize models include optimizer and other info\nreturn path where the model-file is stored.</p>\n\n<p>Args:\n    save_optimizer (bool): whether save optimizer.state_dict().\n    save_path (string): where to save model, if it's None, save_path\n        is generate using time str and info from kwargs.</p>\n\n<p>Returns:\n    save_path(str): the path to save models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_optimizer</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.update_meters", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.update_meters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">losses</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.reset_meters", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.reset_meters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.faster_rcnn.FasterRCNN.get_meter_data", "modulename": "what.models.detection.frcnn.faster_rcnn", "qualname": "FasterRCNN.get_meter_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter", "modulename": "what.models.detection.frcnn.meter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.frcnn.meter.averagevalue_meter", "modulename": "what.models.detection.frcnn.meter.averagevalue_meter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.frcnn.meter.averagevalue_meter.AverageValueMeter", "modulename": "what.models.detection.frcnn.meter.averagevalue_meter", "qualname": "AverageValueMeter", "kind": "class", "doc": "<p>Meters provide a way to keep track of important statistics in an online manner.</p>\n\n<p>This class is abstract, but provides a standard interface for all meters to follow.</p>\n", "bases": "what.models.detection.frcnn.meter.meter.Meter"}, {"fullname": "what.models.detection.frcnn.meter.averagevalue_meter.AverageValueMeter.add", "modulename": "what.models.detection.frcnn.meter.averagevalue_meter", "qualname": "AverageValueMeter.add", "kind": "function", "doc": "<p>Log a new value to the meter</p>\n\n<p>Args:\n    value: Next restult to include.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter.averagevalue_meter.AverageValueMeter.value", "modulename": "what.models.detection.frcnn.meter.averagevalue_meter", "qualname": "AverageValueMeter.value", "kind": "function", "doc": "<p>Get the value of the meter in the current state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter.averagevalue_meter.AverageValueMeter.reset", "modulename": "what.models.detection.frcnn.meter.averagevalue_meter", "qualname": "AverageValueMeter.reset", "kind": "function", "doc": "<p>Resets the meter to default settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter.confusion_meter", "modulename": "what.models.detection.frcnn.meter.confusion_meter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.frcnn.meter.confusion_meter.ConfusionMeter", "modulename": "what.models.detection.frcnn.meter.confusion_meter", "qualname": "ConfusionMeter", "kind": "class", "doc": "<p>Maintains a confusion matrix for a given calssification problem.</p>\n\n<p>The ConfusionMeter constructs a confusion matrix for a multi-class\nclassification problems. It does not support multi-label, multi-class problems:\nfor such problems, please use MultiLabelConfusionMeter.</p>\n\n<p>Args:\n    k (int): number of classes in the classification problem\n    normalized (boolean): Determines whether or not the confusion matrix\n        is normalized or not</p>\n", "bases": "what.models.detection.frcnn.meter.meter.Meter"}, {"fullname": "what.models.detection.frcnn.meter.confusion_meter.ConfusionMeter.__init__", "modulename": "what.models.detection.frcnn.meter.confusion_meter", "qualname": "ConfusionMeter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">normalized</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "what.models.detection.frcnn.meter.confusion_meter.ConfusionMeter.reset", "modulename": "what.models.detection.frcnn.meter.confusion_meter", "qualname": "ConfusionMeter.reset", "kind": "function", "doc": "<p>Resets the meter to default settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter.confusion_meter.ConfusionMeter.add", "modulename": "what.models.detection.frcnn.meter.confusion_meter", "qualname": "ConfusionMeter.add", "kind": "function", "doc": "<p>Computes the confusion matrix of K x K size where K is no of classes</p>\n\n<p>Args:\n    predicted (tensor): Can be an N x K tensor of predicted scores obtained from\n        the model for N examples and K classes or an N-tensor of\n        integer values between 0 and K-1.\n    target (tensor): Can be a N-tensor of integer values assumed to be integer\n        values between 0 and K-1 or N x K tensor, where targets are\n        assumed to be provided as one-hot vectors</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predicted</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter.confusion_meter.ConfusionMeter.value", "modulename": "what.models.detection.frcnn.meter.confusion_meter", "qualname": "ConfusionMeter.value", "kind": "function", "doc": "<p>Returns:\n    Confustion matrix of K rows and K columns, where rows corresponds\n    to ground-truth targets and columns corresponds to predicted\n    targets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter.meter", "modulename": "what.models.detection.frcnn.meter.meter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.frcnn.meter.meter.Meter", "modulename": "what.models.detection.frcnn.meter.meter", "qualname": "Meter", "kind": "class", "doc": "<p>Meters provide a way to keep track of important statistics in an online manner.</p>\n\n<p>This class is abstract, but provides a standard interface for all meters to follow.</p>\n"}, {"fullname": "what.models.detection.frcnn.meter.meter.Meter.reset", "modulename": "what.models.detection.frcnn.meter.meter", "qualname": "Meter.reset", "kind": "function", "doc": "<p>Resets the meter to default settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter.meter.Meter.add", "modulename": "what.models.detection.frcnn.meter.meter", "qualname": "Meter.add", "kind": "function", "doc": "<p>Log a new value to the meter</p>\n\n<p>Args:\n    value: Next restult to include.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.frcnn.meter.meter.Meter.value", "modulename": "what.models.detection.frcnn.meter.meter", "qualname": "Meter.value", "kind": "function", "doc": "<p>Get the value of the meter in the current state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd", "modulename": "what.models.detection.ssd", "kind": "module", "doc": "<p>This module implements SSD object detection model.</p>\n\n<p><br /></p>\n\n<h2 id=\"whatmodelsdetectionssdmobilenet_v1_ssd\">what.models.detection.ssd.mobilenet_v1_ssd</h2>\n\n<h2 id=\"whatmodelsdetectionssdmobilenet_v2_ssd_lite\">what.models.detection.ssd.mobilenet_v2_ssd_lite</h2>\n"}, {"fullname": "what.models.detection.ssd.mobilenet_v1_ssd", "modulename": "what.models.detection.ssd.mobilenet_v1_ssd", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.mobilenet_v1_ssd.MobileNetV1SSD", "modulename": "what.models.detection.ssd.mobilenet_v1_ssd", "qualname": "MobileNetV1SSD", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.mobilenet_v1_ssd.MobileNetV1SSD.__init__", "modulename": "what.models.detection.ssd.mobilenet_v1_ssd", "qualname": "MobileNetV1SSD.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pretrained</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.mobilenet_v1_ssd.MobileNetV1SSD.predict", "modulename": "what.models.detection.ssd.mobilenet_v1_ssd", "qualname": "MobileNetV1SSD.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">prob_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.mobilenet_v1_ssd.MobileNetV1SSD.step", "modulename": "what.models.detection.ssd.mobilenet_v1_ssd", "qualname": "MobileNetV1SSD.step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loader</span>,</span><span class=\"param\">\t<span class=\"n\">criterion</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span>,</span><span class=\"param\">\t<span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">debug_steps</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">epoch</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.mobilenet_v1_ssd.MobileNetV1SSD.train", "modulename": "what.models.detection.ssd.mobilenet_v1_ssd", "qualname": "MobileNetV1SSD.train", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">train_loader</span>,</span><span class=\"param\">\t<span class=\"n\">val_loader</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scheduler</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">criterion</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">base_net_lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">extra_layers_lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">num_epochs</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mf\">0.0005</span>,</span><span class=\"param\">\t<span class=\"n\">debug_steps</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">validation_epochs</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">freeze_base_net</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">freeze_net</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">base_net</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pretrained_ssd</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">checkpoint_folder</span><span class=\"o\">=</span><span class=\"s1\">&#39;models/&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.mobilenet_v1_ssd.MobileNetV1SSD.eval", "modulename": "what.models.detection.ssd.mobilenet_v1_ssd", "qualname": "MobileNetV1SSD.eval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loader</span>, </span><span class=\"param\"><span class=\"n\">criterion</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.mobilenet_v2_ssd_lite", "modulename": "what.models.detection.ssd.mobilenet_v2_ssd_lite", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.mobilenet_v2_ssd_lite.MobileNetV2SSDLite", "modulename": "what.models.detection.ssd.mobilenet_v2_ssd_lite", "qualname": "MobileNetV2SSDLite", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.mobilenet_v2_ssd_lite.MobileNetV2SSDLite.__init__", "modulename": "what.models.detection.ssd.mobilenet_v2_ssd_lite", "qualname": "MobileNetV2SSDLite.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pretrained</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">width_mult</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.mobilenet_v2_ssd_lite.MobileNetV2SSDLite.predict", "modulename": "what.models.detection.ssd.mobilenet_v2_ssd_lite", "qualname": "MobileNetV2SSDLite.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">prob_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.mobilenet_v2_ssd_lite.MobileNetV2SSDLite.step", "modulename": "what.models.detection.ssd.mobilenet_v2_ssd_lite", "qualname": "MobileNetV2SSDLite.step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loader</span>,</span><span class=\"param\">\t<span class=\"n\">criterion</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span>,</span><span class=\"param\">\t<span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">debug_steps</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">epoch</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.mobilenet_v2_ssd_lite.MobileNetV2SSDLite.train", "modulename": "what.models.detection.ssd.mobilenet_v2_ssd_lite", "qualname": "MobileNetV2SSDLite.train", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">train_loader</span>,</span><span class=\"param\">\t<span class=\"n\">val_loader</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scheduler</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">criterion</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">base_net_lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">extra_layers_lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">num_epochs</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mf\">0.0005</span>,</span><span class=\"param\">\t<span class=\"n\">debug_steps</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">validation_epochs</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">freeze_base_net</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">freeze_net</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">base_net</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pretrained_ssd</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">checkpoint_folder</span><span class=\"o\">=</span><span class=\"s1\">&#39;models/&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.mobilenet_v2_ssd_lite.MobileNetV2SSDLite.eval", "modulename": "what.models.detection.ssd.mobilenet_v2_ssd_lite", "qualname": "MobileNetV2SSDLite.eval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loader</span>, </span><span class=\"param\"><span class=\"n\">criterion</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd", "modulename": "what.models.detection.ssd.ssd", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_ssd_config", "modulename": "what.models.detection.ssd.ssd.mobilenet_ssd_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_create", "modulename": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_create", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_create.create_mobilenet_v1_ssd", "modulename": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_create", "qualname": "create_mobilenet_v1_ssd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_classes</span>, </span><span class=\"param\"><span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_create.create_mobilenet_v1_ssd_predictor", "modulename": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_create", "qualname": "create_mobilenet_v1_ssd_predictor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">net</span>, </span><span class=\"param\"><span class=\"n\">candidate_size</span><span class=\"o\">=</span><span class=\"mi\">200</span>, </span><span class=\"param\"><span class=\"n\">nms_method</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_lite_create", "modulename": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_lite_create", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_lite_create.SeperableConv2d", "modulename": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_lite_create", "qualname": "SeperableConv2d", "kind": "function", "doc": "<p>Replace Conv2d with a depthwise Conv2d and Pointwise Conv2d.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_channels</span>, </span><span class=\"param\"><span class=\"n\">out_channels</span>, </span><span class=\"param\"><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_lite_create.create_mobilenetv1_ssd_lite", "modulename": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_lite_create", "qualname": "create_mobilenetv1_ssd_lite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_classes</span>, </span><span class=\"param\"><span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_lite_create.create_mobilenetv1_ssd_lite_predictor", "modulename": "what.models.detection.ssd.ssd.mobilenet_v1_ssd_lite_create", "qualname": "create_mobilenetv1_ssd_lite_predictor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">net</span>, </span><span class=\"param\"><span class=\"n\">candidate_size</span><span class=\"o\">=</span><span class=\"mi\">200</span>, </span><span class=\"param\"><span class=\"n\">nms_method</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v2_ssd_lite_create", "modulename": "what.models.detection.ssd.ssd.mobilenet_v2_ssd_lite_create", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v2_ssd_lite_create.SeperableConv2d", "modulename": "what.models.detection.ssd.ssd.mobilenet_v2_ssd_lite_create", "qualname": "SeperableConv2d", "kind": "function", "doc": "<p>Replace Conv2d with a depthwise Conv2d and Pointwise Conv2d.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in_channels</span>,</span><span class=\"param\">\t<span class=\"n\">out_channels</span>,</span><span class=\"param\">\t<span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">onnx_compatible</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v2_ssd_lite_create.create_mobilenet_v2_ssd_lite", "modulename": "what.models.detection.ssd.ssd.mobilenet_v2_ssd_lite_create", "qualname": "create_mobilenet_v2_ssd_lite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_classes</span>,</span><span class=\"param\">\t<span class=\"n\">width_mult</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">use_batch_norm</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">onnx_compatible</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v2_ssd_lite_create.create_mobilenet_v2_ssd_lite_predictor", "modulename": "what.models.detection.ssd.ssd.mobilenet_v2_ssd_lite_create", "qualname": "create_mobilenet_v2_ssd_lite_predictor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">net</span>,</span><span class=\"param\">\t<span class=\"n\">candidate_size</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">nms_method</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create", "modulename": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create.SeperableConv2d", "modulename": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create", "qualname": "SeperableConv2d", "kind": "function", "doc": "<p>Replace Conv2d with a depthwise Conv2d and Pointwise Conv2d.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">in_channels</span>,</span><span class=\"param\">\t<span class=\"n\">out_channels</span>,</span><span class=\"param\">\t<span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">onnx_compatible</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create.create_mobilenetv3_large_ssd_lite", "modulename": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create", "qualname": "create_mobilenetv3_large_ssd_lite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_classes</span>,</span><span class=\"param\">\t<span class=\"n\">width_mult</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">use_batch_norm</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">onnx_compatible</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create.create_mobilenetv3_small_ssd_lite", "modulename": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create", "qualname": "create_mobilenetv3_small_ssd_lite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_classes</span>,</span><span class=\"param\">\t<span class=\"n\">width_mult</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">use_batch_norm</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">onnx_compatible</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create.create_mobilenetv3_ssd_lite_predictor", "modulename": "what.models.detection.ssd.ssd.mobilenet_v3_ssd_lite_create", "qualname": "create_mobilenetv3_ssd_lite_predictor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">net</span>,</span><span class=\"param\">\t<span class=\"n\">candidate_size</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">nms_method</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.multibox_loss", "modulename": "what.models.detection.ssd.ssd.multibox_loss", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.multibox_loss.MultiboxLoss", "modulename": "what.models.detection.ssd.ssd.multibox_loss", "qualname": "MultiboxLoss", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "what.models.detection.ssd.ssd.multibox_loss.MultiboxLoss.__init__", "modulename": "what.models.detection.ssd.ssd.multibox_loss", "qualname": "MultiboxLoss.__init__", "kind": "function", "doc": "<p>Implement SSD Multibox Loss.</p>\n\n<p>Basically, Multibox loss combines classification loss\n and Smooth L1 regression loss.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">priors</span>,</span><span class=\"param\">\t<span class=\"n\">iou_threshold</span>,</span><span class=\"param\">\t<span class=\"n\">neg_pos_ratio</span>,</span><span class=\"param\">\t<span class=\"n\">center_variance</span>,</span><span class=\"param\">\t<span class=\"n\">size_variance</span>,</span><span class=\"param\">\t<span class=\"n\">device</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.ssd.multibox_loss.MultiboxLoss.forward", "modulename": "what.models.detection.ssd.ssd.multibox_loss", "qualname": "MultiboxLoss.forward", "kind": "function", "doc": "<p>Compute classification loss and smooth l1 loss.</p>\n\n<p>Args:\n    confidence (batch_size, num_priors, num_classes): class predictions.\n    locations (batch_size, num_priors, 4): predicted locations.\n    labels (batch_size, num_priors): real labels of all the priors.\n    boxes (batch_size, num_priors, 4): real boxes corresponding all the priors.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">confidence</span>, </span><span class=\"param\"><span class=\"n\">predicted_locations</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">gt_locations</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.predictor", "modulename": "what.models.detection.ssd.ssd.predictor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.predictor.Predictor", "modulename": "what.models.detection.ssd.ssd.predictor", "qualname": "Predictor", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.predictor.Predictor.__init__", "modulename": "what.models.detection.ssd.ssd.predictor", "qualname": "Predictor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">net</span>,</span><span class=\"param\">\t<span class=\"n\">size</span>,</span><span class=\"param\">\t<span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">std</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">nms_method</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">iou_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.45</span>,</span><span class=\"param\">\t<span class=\"n\">filter_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">candidate_size</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.ssd.predictor.Predictor.predict", "modulename": "what.models.detection.ssd.ssd.predictor", "qualname": "Predictor.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">prob_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.preprocessing", "modulename": "what.models.detection.ssd.ssd.preprocessing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.preprocessing.TrainAugmentation", "modulename": "what.models.detection.ssd.ssd.preprocessing", "qualname": "TrainAugmentation", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.preprocessing.TrainAugmentation.__init__", "modulename": "what.models.detection.ssd.ssd.preprocessing", "qualname": "TrainAugmentation.__init__", "kind": "function", "doc": "<p>Args:\n    size: the size the of final image.\n    mean: mean pixel value per channel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">std</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.ssd.preprocessing.TestTransform", "modulename": "what.models.detection.ssd.ssd.preprocessing", "qualname": "TestTransform", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.preprocessing.TestTransform.__init__", "modulename": "what.models.detection.ssd.ssd.preprocessing", "qualname": "TestTransform.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">std</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.ssd.preprocessing.PredictionTransform", "modulename": "what.models.detection.ssd.ssd.preprocessing", "qualname": "PredictionTransform", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.preprocessing.PredictionTransform.__init__", "modulename": "what.models.detection.ssd.ssd.preprocessing", "qualname": "PredictionTransform.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">std</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.ssd.squeezenet_ssd_config", "modulename": "what.models.detection.ssd.ssd.squeezenet_ssd_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.squeezenet_ssd_lite_create", "modulename": "what.models.detection.ssd.ssd.squeezenet_ssd_lite_create", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.squeezenet_ssd_lite_create.SeperableConv2d", "modulename": "what.models.detection.ssd.ssd.squeezenet_ssd_lite_create", "qualname": "SeperableConv2d", "kind": "function", "doc": "<p>Replace Conv2d with a depthwise Conv2d and Pointwise Conv2d.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_channels</span>, </span><span class=\"param\"><span class=\"n\">out_channels</span>, </span><span class=\"param\"><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.squeezenet_ssd_lite_create.create_squeezenet_ssd_lite", "modulename": "what.models.detection.ssd.ssd.squeezenet_ssd_lite_create", "qualname": "create_squeezenet_ssd_lite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_classes</span>, </span><span class=\"param\"><span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.squeezenet_ssd_lite_create.create_squeezenet_ssd_lite_predictor", "modulename": "what.models.detection.ssd.ssd.squeezenet_ssd_lite_create", "qualname": "create_squeezenet_ssd_lite_predictor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">net</span>,</span><span class=\"param\">\t<span class=\"n\">candidate_size</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">nms_method</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.ssd", "modulename": "what.models.detection.ssd.ssd.ssd", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.ssd.GraphPath", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "GraphPath", "kind": "class", "doc": "<p>GraphPath(s0, name, s1)</p>\n", "bases": "builtins.tuple"}, {"fullname": "what.models.detection.ssd.ssd.ssd.GraphPath.__init__", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "GraphPath.__init__", "kind": "function", "doc": "<p>Create new instance of GraphPath(s0, name, s1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s0</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">s1</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.ssd.ssd.GraphPath.s0", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "GraphPath.s0", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "what.models.detection.ssd.ssd.ssd.GraphPath.name", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "GraphPath.name", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "what.models.detection.ssd.ssd.ssd.GraphPath.s1", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "GraphPath.s1", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD.__init__", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD.__init__", "kind": "function", "doc": "<p>Compose a SSD model using the given components.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_classes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">base_net</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">ModuleList</span>,</span><span class=\"param\">\t<span class=\"n\">source_layer_indexes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">extras</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">ModuleList</span>,</span><span class=\"param\">\t<span class=\"n\">classification_headers</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">ModuleList</span>,</span><span class=\"param\">\t<span class=\"n\">regression_headers</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">ModuleList</span>,</span><span class=\"param\">\t<span class=\"n\">is_test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD.forward", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD.forward", "kind": "function", "doc": "<p>Defines the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD.compute_header", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD.compute_header", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD.init", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD.init", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD.init_from_base_net", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD.init_from_base_net", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD.init_from_pretrained_ssd", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD.init_from_pretrained_ssd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD.load", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">pretrained</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.ssd.SSD.save", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "SSD.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.ssd.ssd.MatchPrior", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "MatchPrior", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.ssd.ssd.MatchPrior.__init__", "modulename": "what.models.detection.ssd.ssd.ssd", "qualname": "MatchPrior.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_form_priors</span>, </span><span class=\"param\"><span class=\"n\">center_variance</span>, </span><span class=\"param\"><span class=\"n\">size_variance</span>, </span><span class=\"param\"><span class=\"n\">iou_threshold</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.utils", "modulename": "what.models.detection.ssd.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.utils.box_utils", "modulename": "what.models.detection.ssd.utils.box_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDBoxSizes", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDBoxSizes", "kind": "class", "doc": "<p>SSDBoxSizes(min, max)</p>\n", "bases": "builtins.tuple"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDBoxSizes.__init__", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDBoxSizes.__init__", "kind": "function", "doc": "<p>Create new instance of SSDBoxSizes(min, max)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">min</span>, </span><span class=\"param\"><span class=\"nb\">max</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDBoxSizes.min", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDBoxSizes.min", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDBoxSizes.max", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDBoxSizes.max", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDSpec", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDSpec", "kind": "class", "doc": "<p>SSDSpec(feature_map_size, shrinkage, box_sizes, aspect_ratios)</p>\n", "bases": "builtins.tuple"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDSpec.__init__", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDSpec.__init__", "kind": "function", "doc": "<p>Create new instance of SSDSpec(feature_map_size, shrinkage, box_sizes, aspect_ratios)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">feature_map_size</span>, </span><span class=\"param\"><span class=\"n\">shrinkage</span>, </span><span class=\"param\"><span class=\"n\">box_sizes</span>, </span><span class=\"param\"><span class=\"n\">aspect_ratios</span></span>)</span>"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDSpec.feature_map_size", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDSpec.feature_map_size", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDSpec.shrinkage", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDSpec.shrinkage", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDSpec.box_sizes", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDSpec.box_sizes", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, {"fullname": "what.models.detection.ssd.utils.box_utils.SSDSpec.aspect_ratios", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "SSDSpec.aspect_ratios", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n"}, {"fullname": "what.models.detection.ssd.utils.box_utils.generate_ssd_priors", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "generate_ssd_priors", "kind": "function", "doc": "<p>Generate SSD Prior Boxes.</p>\n\n<p>It returns the center, height and width of the priors. The values are relative to the image size\nArgs:\n    specs: SSDSpecs about the shapes of sizes of prior boxes. i.e.\n        specs = [\n            SSDSpec(38, 8, SSDBoxSizes(30, 60), [2]),\n            SSDSpec(19, 16, SSDBoxSizes(60, 111), [2, 3]),\n            SSDSpec(10, 32, SSDBoxSizes(111, 162), [2, 3]),\n            SSDSpec(5, 64, SSDBoxSizes(162, 213), [2, 3]),\n            SSDSpec(3, 100, SSDBoxSizes(213, 264), [2]),\n            SSDSpec(1, 300, SSDBoxSizes(264, 315), [2])\n        ]\n    image_size: image size.\n    clamp: if true, clamp the values to make fall between [0.0, 1.0]\nReturns:\n    priors (num_priors, 4): The prior boxes represented as [[center_x, center_y, w, h]]. All the values\n        are relative to the image size.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">specs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">what</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">detection</span><span class=\"o\">.</span><span class=\"n\">ssd</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">box_utils</span><span class=\"o\">.</span><span class=\"n\">SSDSpec</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span>,</span><span class=\"param\">\t<span class=\"n\">clamp</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.convert_locations_to_boxes", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "convert_locations_to_boxes", "kind": "function", "doc": "<p>Convert regressional location results of SSD into boxes in the form of (center_x, center_y, h, w).</p>\n\n<p>The conversion:\n    $$predicted_center * center_variance = \frac {real_center - prior_center} {prior_hw}$$\n    $$exp(predicted_hw * size_variance) = \frac {real_hw} {prior_hw}$$\nWe do it in the inverse direction here.\nArgs:\n    locations (batch_size, num_priors, 4): the regression output of SSD. It will contain the outputs as well.\n    priors (num_priors, 4) or (batch_size/1, num_priors, 4): prior boxes.\n    center_variance: a float used to change the scale of center.\n    size_variance: a float used to change of scale of size.\nReturns:\n    boxes:  priors: [[center_x, center_y, h, w]]. All the values\n        are relative to the image size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">locations</span>, </span><span class=\"param\"><span class=\"n\">priors</span>, </span><span class=\"param\"><span class=\"n\">center_variance</span>, </span><span class=\"param\"><span class=\"n\">size_variance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.convert_boxes_to_locations", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "convert_boxes_to_locations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">center_form_boxes</span>,</span><span class=\"param\">\t<span class=\"n\">center_form_priors</span>,</span><span class=\"param\">\t<span class=\"n\">center_variance</span>,</span><span class=\"param\">\t<span class=\"n\">size_variance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.area_of", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "area_of", "kind": "function", "doc": "<p>Compute the areas of rectangles given two corners.</p>\n\n<p>Args:\n    left_top (N, 2): left top corner.\n    right_bottom (N, 2): right bottom corner.</p>\n\n<p>Returns:\n    area (N): return the area.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">left_top</span>, </span><span class=\"param\"><span class=\"n\">right_bottom</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.iou_of", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "iou_of", "kind": "function", "doc": "<p>Return intersection-over-union (Jaccard index) of boxes.</p>\n\n<p>Args:\n    boxes0 (N, 4): ground truth boxes.\n    boxes1 (N or 1, 4): predicted boxes.\n    eps: a small number to avoid 0 as denominator.\nReturns:\n    iou (N): IoU values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">boxes0</span>, </span><span class=\"param\"><span class=\"n\">boxes1</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.assign_priors", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "assign_priors", "kind": "function", "doc": "<p>Assign ground truth boxes and targets to priors.</p>\n\n<p>Args:\n    gt_boxes (num_targets, 4): ground truth boxes.\n    gt_labels (num_targets): labels of targets.\n    priors (num_priors, 4): corner form priors\nReturns:\n    boxes (num_priors, 4): real values for priors.\n    labels (num_priros): labels for priors.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gt_boxes</span>, </span><span class=\"param\"><span class=\"n\">gt_labels</span>, </span><span class=\"param\"><span class=\"n\">corner_form_priors</span>, </span><span class=\"param\"><span class=\"n\">iou_threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.hard_negative_mining", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "hard_negative_mining", "kind": "function", "doc": "<p>It used to suppress the presence of a large number of negative prediction.\nIt works on image level not batch level.\nFor any example/image, it keeps all the positive predictions and\n cut the number of negative predictions to make sure the ratio\n between the negative examples and positive examples is no more\n the given ratio for an image.</p>\n\n<p>Args:\n    loss (N, num_priors): the loss for each example.\n    labels (N, num_priors): the labels.\n    neg_pos_ratio:  the ratio between the negative examples and positive examples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loss</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">neg_pos_ratio</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.center_form_to_corner_form", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "center_form_to_corner_form", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">locations</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.corner_form_to_center_form", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "corner_form_to_center_form", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">boxes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.hard_nms", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "hard_nms", "kind": "function", "doc": "<p>Args:\n    box_scores (N, 5): boxes in corner-form and probabilities.\n    iou_threshold: intersection over union threshold.\n    top_k: keep top_k results. If k &lt;= 0, keep all the results.\n    candidate_size: only consider the candidates with the highest scores.\nReturns:\n     picked: a list of indexes of the kept boxes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">box_scores</span>, </span><span class=\"param\"><span class=\"n\">iou_threshold</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">candidate_size</span><span class=\"o\">=</span><span class=\"mi\">200</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.nms", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "nms", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">box_scores</span>,</span><span class=\"param\">\t<span class=\"n\">nms_method</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">score_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">iou_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">candidate_size</span><span class=\"o\">=</span><span class=\"mi\">200</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.box_utils.soft_nms", "modulename": "what.models.detection.ssd.utils.box_utils", "qualname": "soft_nms", "kind": "function", "doc": "<p>Soft NMS implementation.</p>\n\n<p>References:\n    <a href=\"https://arxiv.org/abs/1704.04503\">https://arxiv.org/abs/1704.04503</a>\n    <a href=\"https://github.com/facebookresearch/Detectron/blob/master/detectron/utils/cython_nms.pyx\">https://github.com/facebookresearch/Detectron/blob/master/detectron/utils/cython_nms.pyx</a></p>\n\n<p>Args:\n    box_scores (N, 5): boxes in corner-form and probabilities.\n    score_threshold: boxes with scores less than value are not considered.\n    sigma: the parameter in score re-computation.\n        scores[i] = scores[i] * exp(-(iou_i)^2 / simga)\n    top_k: keep top_k results. If k &lt;= 0, keep all the results.\nReturns:\n     picked_box_scores (K, 5): results of NMS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">box_scores</span>, </span><span class=\"param\"><span class=\"n\">score_threshold</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.misc", "modulename": "what.models.detection.ssd.utils.misc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.ssd.utils.misc.save_checkpoint", "modulename": "what.models.detection.ssd.utils.misc", "qualname": "save_checkpoint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">epoch</span>,</span><span class=\"param\">\t<span class=\"n\">net_state_dict</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer_state_dict</span>,</span><span class=\"param\">\t<span class=\"n\">best_score</span>,</span><span class=\"param\">\t<span class=\"n\">checkpoint_path</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.misc.load_checkpoint", "modulename": "what.models.detection.ssd.utils.misc", "qualname": "load_checkpoint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">checkpoint_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.ssd.utils.misc.freeze_net_layers", "modulename": "what.models.detection.ssd.utils.misc", "qualname": "freeze_net_layers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">net</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.utils", "modulename": "what.models.detection.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.utils.array_utils", "modulename": "what.models.detection.utils.array_utils", "kind": "module", "doc": "<p>tools to convert specified type</p>\n"}, {"fullname": "what.models.detection.utils.array_utils.to_numpy", "modulename": "what.models.detection.utils.array_utils", "qualname": "to_numpy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.utils.array_utils.to_tensor", "modulename": "what.models.detection.utils.array_utils", "qualname": "to_tensor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.utils.array_utils.to_scalar", "modulename": "what.models.detection.utils.array_utils", "qualname": "to_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.utils.box_utils", "modulename": "what.models.detection.utils.box_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.utils.box_utils.draw_bounding_boxes", "modulename": "what.models.detection.utils.box_utils", "qualname": "draw_bounding_boxes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">boxes</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">class_names</span>, </span><span class=\"param\"><span class=\"n\">probs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.utils.time_utils", "modulename": "what.models.detection.utils.time_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.utils.time_utils.Timer", "modulename": "what.models.detection.utils.time_utils", "qualname": "Timer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.utils.time_utils.Timer.start", "modulename": "what.models.detection.utils.time_utils", "qualname": "Timer.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.utils.time_utils.Timer.end", "modulename": "what.models.detection.utils.time_utils", "qualname": "Timer.end", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.yolo", "modulename": "what.models.detection.yolo", "kind": "module", "doc": "<p>This module implements YOLO object detection model.</p>\n\n<p><br /></p>\n\n<h2 id=\"whatmodelsdetectionyoloyolov3\">what.models.detection.yolo.yolov3</h2>\n\n<h2 id=\"whatmodelsdetectionyoloyolov3_tiny\">what.models.detection.yolo.yolov3_tiny</h2>\n\n<h2 id=\"whatmodelsdetectionyoloyolov4\">what.models.detection.yolo.yolov4</h2>\n\n<h2 id=\"whatmodelsdetectionyoloyolov3_tiny-2\">what.models.detection.yolo.yolov3_tiny</h2>\n"}, {"fullname": "what.models.detection.yolo.yolov3", "modulename": "what.models.detection.yolo.yolov3", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.yolo.yolov3.YOLOV3", "modulename": "what.models.detection.yolo.yolov3", "qualname": "YOLOV3", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.yolo.yolov3.YOLOV3.__init__", "modulename": "what.models.detection.yolo.yolov3", "qualname": "YOLOV3.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">class_names</span>, </span><span class=\"param\"><span class=\"n\">model_path</span></span>)</span>"}, {"fullname": "what.models.detection.yolo.yolov3.YOLOV3.predict", "modulename": "what.models.detection.yolo.yolov3", "qualname": "YOLOV3.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">prob_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.yolo.yolov3_tiny", "modulename": "what.models.detection.yolo.yolov3_tiny", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.yolo.yolov3_tiny.YOLOV3_TINY", "modulename": "what.models.detection.yolo.yolov3_tiny", "qualname": "YOLOV3_TINY", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.yolo.yolov3_tiny.YOLOV3_TINY.__init__", "modulename": "what.models.detection.yolo.yolov3_tiny", "qualname": "YOLOV3_TINY.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">class_names</span>, </span><span class=\"param\"><span class=\"n\">model_path</span></span>)</span>"}, {"fullname": "what.models.detection.yolo.yolov3_tiny.YOLOV3_TINY.predict", "modulename": "what.models.detection.yolo.yolov3_tiny", "qualname": "YOLOV3_TINY.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">prob_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.yolo.yolov4", "modulename": "what.models.detection.yolo.yolov4", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.yolo.yolov4.mish", "modulename": "what.models.detection.yolo.yolov4", "qualname": "mish", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.yolo.yolov4.YOLOV4", "modulename": "what.models.detection.yolo.yolov4", "qualname": "YOLOV4", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.yolo.yolov4.YOLOV4.__init__", "modulename": "what.models.detection.yolo.yolov4", "qualname": "YOLOV4.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">class_names</span>, </span><span class=\"param\"><span class=\"n\">model_path</span></span>)</span>"}, {"fullname": "what.models.detection.yolo.yolov4.YOLOV4.predict", "modulename": "what.models.detection.yolo.yolov4", "qualname": "YOLOV4.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">prob_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.yolo.yolov4_tiny", "modulename": "what.models.detection.yolo.yolov4_tiny", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.yolo.yolov4_tiny.mish", "modulename": "what.models.detection.yolo.yolov4_tiny", "qualname": "mish", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.models.detection.yolo.yolov4_tiny.YOLOV4_TINY", "modulename": "what.models.detection.yolo.yolov4_tiny", "qualname": "YOLOV4_TINY", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.models.detection.yolo.yolov4_tiny.YOLOV4_TINY.__init__", "modulename": "what.models.detection.yolo.yolov4_tiny", "qualname": "YOLOV4_TINY.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">class_names</span>, </span><span class=\"param\"><span class=\"n\">model_path</span></span>)</span>"}, {"fullname": "what.models.detection.yolo.yolov4_tiny.YOLOV4_TINY.predict", "modulename": "what.models.detection.yolo.yolov4_tiny", "qualname": "YOLOV4_TINY.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">top_k</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">prob_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.utils", "modulename": "what.utils", "kind": "module", "doc": "<p>Utility functions for WHAT.</p>\n\n<p><br /></p>\n\n<h2 id=\"whatutilsloggerget_logger\">what.utils.logger.get_logger</h2>\n\n<h2 id=\"whatutilsresizebilinear_resize\">what.utils.resize.bilinear_resize</h2>\n\n<h2 id=\"whatutilsproj_lpproj_lp\">what.utils.proj_lp.proj_lp</h2>\n"}, {"fullname": "what.utils.file", "modulename": "what.utils.file", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.utils.file.MyProgressBar", "modulename": "what.utils.file", "qualname": "MyProgressBar", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "what.utils.file.download_file", "modulename": "what.utils.file", "qualname": "download_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"nb\">hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.utils.file.get_file", "modulename": "what.utils.file", "qualname": "get_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"nb\">hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.utils.logger", "modulename": "what.utils.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.utils.logger.get_logger", "modulename": "what.utils.logger", "qualname": "get_logger", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.utils.logger.TensorBoardLogger", "modulename": "what.utils.logger", "qualname": "TensorBoardLogger", "kind": "class", "doc": "<p>Logging in tensorboard without tensorflow ops.</p>\n"}, {"fullname": "what.utils.logger.TensorBoardLogger.__init__", "modulename": "what.utils.logger", "qualname": "TensorBoardLogger.__init__", "kind": "function", "doc": "<p>Creates a summary writer logging to log_dir.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log_dir</span></span>)</span>"}, {"fullname": "what.utils.logger.TensorBoardLogger.log_scalar", "modulename": "what.utils.logger", "qualname": "TensorBoardLogger.log_scalar", "kind": "function", "doc": "<p>Log a scalar variable.</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<p>tag : basestring\n    Name of the scalar\nvalue\nstep : int\n    training iteration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tag</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.utils.logger.TensorBoardLogger.log_images", "modulename": "what.utils.logger", "qualname": "TensorBoardLogger.log_images", "kind": "function", "doc": "<p>Logs a list of images.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tag</span>, </span><span class=\"param\"><span class=\"n\">images</span>, </span><span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.utils.logger.TensorBoardLogger.log_histogram", "modulename": "what.utils.logger", "qualname": "TensorBoardLogger.log_histogram", "kind": "function", "doc": "<p>Logs the histogram of a list/vector of values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tag</span>, </span><span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">step</span>, </span><span class=\"param\"><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">1000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.utils.proj_lp", "modulename": "what.utils.proj_lp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.utils.proj_lp.proj_lp", "modulename": "what.utils.proj_lp", "qualname": "proj_lp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">xi</span><span class=\"o\">=</span><span class=\"mi\">50</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "what.utils.resize", "modulename": "what.utils.resize", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "what.utils.resize.bilinear_resize", "modulename": "what.utils.resize", "qualname": "bilinear_resize", "kind": "function", "doc": "<p><code>image</code> is a 2-D numpy array\n<code>height</code> and <code>width</code> are the desired spatial dimension of the new 2-D array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">height</span>, </span><span class=\"param\"><span class=\"n\">width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();